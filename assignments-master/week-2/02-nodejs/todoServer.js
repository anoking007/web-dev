/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const http = require('http');
  const { v4: uuidv4 } = require('uuid');
  
  const server = require('../todoServer');
  const port = 3000;
  const baseUrl = `http://localhost:${port}`;
  
  describe('Todo API', () => {
    let createdTodoId;
    let globalServer;
  
    beforeAll((done) => {
      if (globalServer) {
          globalServer.close();
      }
      globalServer = server.listen(3000);
      done()
    });
  
    afterAll((done) => {
      globalServer.close(done);
    });
  
    const todo = {
      title: 'New Todo',
      description: 'A new todo item',
    };
  
    test('should create a new todo item', (done) => {
      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      };
  
      const req = http.request(`${baseUrl}/todos`, options, (res) => {
        expect(res.statusCode).toBe(201);
        let data = '';
  
        res.on('data', (chunk) => {
          data += chunk;
        });
  
        res.on('end', () => {
          const response = JSON.parse(data);
          expect(response.id).toBeTruthy();
          createdTodoId = response.id;
          done();
        });
      });
  
      req.write(JSON.stringify(todo));
      req.end();
    });
  
    test('should retrieve all todo items', (done) => {
      http.get(`${baseUrl}/todos`, (res) => {
        expect(res.statusCode).toBe(200);
        let data = '';
  
        res.on('data', (chunk) => {
          data += chunk;
        });
  
        res.on('end', () => {
          const todos = JSON.parse(data);
          expect(Array.isArray(todos)).toBe(true);
          expect(todos.length).toBe(1);
          expect(todos[0].title).toBe(todo.title);
          expect(todos[0].description).toBe(todo.description);
          done();
        });
      });
    });
  
    test('should retrieve a specific todo item by ID', (done) => {
      http.get(`${baseUrl}/todos/${createdTodoId}`, (res) => {
        expect(res.statusCode).toBe(200);
        let data = '';
  
        res.on('data', (chunk) => {
          data += chunk;
        });
  
        res.on('end', () => {
          const todo = JSON.parse(data);
          expect(todo.id).toBe(createdTodoId);
          done();
        });
      });
    });
  
    test('should update a specific todo item', (done) => {
      const updatedTodo = {
        title: 'Updated Todo',
        description: 'An updated todo item',
      };
  
      const options = {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
      };
  
      const req = http.request(
        `${baseUrl}/todos/${createdTodoId}`,
        options,
        (res) => {
          expect(res.statusCode).toBe(200);
          done();
        }
      );
  
      req.write(JSON.stringify(updatedTodo));
      req.end();
    });
  
    test('should delete a specific todo item', (done) => {
      const options = {
        method: 'DELETE',
      };
  
      const req = http.request(
        `${baseUrl}/todos/${createdTodoId}`,
        options,
        (res) => {
          expect(res.statusCode).toBe(200);
          done();
        }
      );
  
      req.end();
    });
  
    test('should return 404 for a non-existent todo item', (done) => {
      http.get(`${baseUrl}/todos/${uuidv4()}`, (res) => {
        expect(res.statusCode).toBe(404);
        done();
      });
    });
  });
  
  module.exports = app;